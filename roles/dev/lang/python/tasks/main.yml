---

- include_vars: '{{ item }}'
  with_first_found:
  - files:
      - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
      - '{{ ansible_distribution }}.yml'
      - '{{ ansible_pkg_mgr }}.yml'
      - 'default.yml'
    paths: '{{ role_path }}/vars/os_aware'

- name: Install dependencies
  package:
    name: '{{ item }}'
    state: present
  with_items: "{{ dependencies }}"

- name: Fetch python2 version
  shell: "python2 --version 2>&1"
  # next line wont work on centos ?
  # shell: "python2 --version 2>&1"
  register: python2_v
  become: true
  become_user: "{{ dev_user}}"
  changed_when: False
  ignore_errors: true
- debug:
    msg: "Expect: {{ pkg_ics.python2.version_expect }}, got: {{ python2_v.stdout }}"

- name: Install python2
  include_tasks: install_by_make.yml
  when: "( python2_v | failed ) or ( pkg_ics.python2.version_expect not in python2_v.stdout )"
  vars:
    python_x: python2
    pkg_ic: '{{ pkg_ics.python2 }}'

- name: Fetch python3 version
  shell: "python3 --version 2>&1"
  # next line wont work on centos ?
  # shell: "python3 --version 2>&1"
  become: true
  become_user: "{{ dev_user}}"
  register: python3_v
  changed_when: False
  ignore_errors: true
- debug:
    msg: "Expect: {{ pkg_ics.python3.version_expect }}, got: {{ python3_v.stdout }}"
- name: Install python3
  include_tasks: install_by_make.yml
  when: "( python3_v | failed ) or ( pkg_ics.python3.version_expect not in python3_v.stdout )"
  vars:
    python_x: python3
    pkg_ic: '{{ pkg_ics.python3 }}'

# - include_tasks: install_from_tar.yml
